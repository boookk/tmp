---
layout: post
title: "[BOJ] 위상 정렬 🥇3"
date: 2022-03-17 00:00:00 +0300
tags: [Algorithm, BOJ]
---

# 📚 <mark style='background-color: #ffd33d'> Topological Sort </mark>

출처 : <https://www.acmicpc.net/problem/9470>

<br>

## 💡 풀이
```python
import sys
from collections import deque

input = sys.stdin.readline

T = int(input())
for _ in range(T):
    k, m, p = map(int, input().split())

    graph = [[] for _ in range(m + 1)]
    inDegree = [0] * (m + 1)
    dp = [[0] * (m + 1) for _ in range(m + 1)]
    end = 0

    for _ in range(p):
        a, b = map(int, input().split())
        graph[a].append(b)
        inDegree[b] += 1

    queue = deque()
    for i in range(1, m + 1):
        if inDegree[i] == 0:
            queue.append(i)
            dp[i][i] = 1

    while queue:
        x = queue.popleft()
        end = x

        for i in graph[x]:
            inDegree[i] -= 1

            dp[x][i] = dp[x][x]

            if inDegree[i] == 0:
                queue.append(i)
                max_ = 0
                count = 0
                for row in range(1, m + 1):
                    if max_ != 0 and dp[row][i] == max_:
                        count += 1
                    elif dp[row][i] > max_:
                        max_ = dp[row][i]
                        count = 1

                dp[i][i] = max_ if count == 1 else max_ + 1

    print(k, dp[end][end])
print(*result)
```

<br>

## 📝 해설

#### 1. 아래와 같은 2차원 리스트(이하 dp)가 있다고 가정한다.

![image](https://user-images.githubusercontent.com/76933244/159220634-ad811136-365a-46c8-bacc-66f0e2228e6e.png)



#### 2. 진입 차수가 0인 노드의 번호를 i라고 가정하면, dp[i][i]에 1로 설정한다.

![image](https://user-images.githubusercontent.com/76933244/159221083-4d5c9ef2-753c-4d38-a2cb-58d1d8888252.png)


#### 3. 노드 a에서 노드 b로 가는 경로가 있다면, 진입 차수를 감소시키고 dp[a][b]의 값을 dp[a][a] 값으로 변환한다.

![image](https://user-images.githubusercontent.com/76933244/159222000-ebb41469-4c11-47fb-bae7-e491b6cd5527.png)


#### 4. 진입 차수가 0이 아니었던 노드의 진입 차수가 0이 되었다면, queue에 노드 번호를 넣고, 아래의 조건에 따라 dp 테이블의 값을 갱신한다.
- 노드 번호 v에서 해당 노드로 들어오는 강의 순서 중 가장 큰 값을 i라고 하였을 때
- 해당 노드로 들어오는 모든 강 중에서 강의 순서가 i인 강이 1개이면, dp[v][v]의 값을 i로 설정한다.
- i인 강이 2개 이상이면 dp[v][v]의 값을 i + 1로 설정한다.

![image](https://user-images.githubusercontent.com/76933244/159224074-ce7eb3c0-6556-4a86-9f3d-f2fbfe4829e3.png)

#### 5. 과정 3 ~ 4를 반복하면 아래와 같은 dp 테이블이 만들어진다.

![image](https://user-images.githubusercontent.com/76933244/159224623-867cf686-41f6-4483-a227-529bc525ca68.png)

#### 6. 마지막 노드를 v라고 한다면, 하천계의 Strahler 순서는 dp[v][v]가 된다.

![image](https://user-images.githubusercontent.com/76933244/159224845-ac8deff2-2697-407a-9e72-63437f4fe6ea.png)

<br>
